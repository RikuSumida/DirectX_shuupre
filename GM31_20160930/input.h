#ifndef _INPUT_H
#define _INPUT_H
/*******************************************************************************
*
*	インクルードファイル
*
*******************************************************************************/
#include "dinput.h"		//入力処理に必要


/*******************************************************************************
*
*	ライブラリのリンク
*
*******************************************************************************/
#pragma comment( lib, "dinput8.lib" )	//入力処理に必要

/*******************************************************************************
*
*	マクロ定義
*
*******************************************************************************/
#define DIRECTINPUT_VERSION ( 0x0800 ) //警告対処用
#define REPEAT_INTERVAL ( 40 ) //リピートキーの間隔

/*******************************************************************************
*
*	構造体の定義
*
*******************************************************************************/

/*******************************************************************************
*
*	クラスの定義
*
*******************************************************************************/
//前方宣言
class CInput
{
private:

	LPDIRECTINPUT8 m_pInput ; //DirectInputオブジェクトへのポインタ
	LPDIRECTINPUTDEVICE8 m_pDevKeyboard ; //入力デバイス(キーボード)へのポインタ
	static BYTE m_aKeyState[ 256 ]; //キーボードの入力情報ワーク
	static BYTE m_aKeyStateTrigger[ 256 ]; //トリガー情報
	static BYTE m_aKeyStateRelease[ 256 ]; //リリース情報
	static BYTE m_aKeyStateRepeat[ 256 ]; //キーリピート情報
	static int m_aKeyStateRepeatCount[ 256 ]; //キーリピートカウント



public :
	CInput();
	~CInput();
	HRESULT Init ( HINSTANCE hInstance , HWND hWnd );
	void Uninit (void);
	void Update (void);



	bool GetKeyboardPress( int nKey );
	bool GetKeyboardTrigger( int nKey );
	bool GetKeyboardRelease( int nKey );
	bool GetKeyboardRepeat( int nKey );


};

/*******************************************************************************
*
*	プロトタイプ宣言
*
*
*******************************************************************************/
#endif